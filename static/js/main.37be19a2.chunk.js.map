{"version":3,"sources":["components/OpGg.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["OpGg","useState","matchId","setMatchId","gamerTags","setGamerTags","nicks","setNicks","nickHref","setNickHref","gamerTagHref","setGamerTagHref","alertMessage","setAlertMessage","className","class","type","value","placeholder","onChange","event","target","onClick","fetch","then","response","ok","json","Error","status","matchData","opponentTeam","MatchTeams","filter","matchTeam","Team","Organisation","id","length","opponentPlayers","TeamMembers","promiseArray","forEach","player","push","Promise","all","responseArray","map","resolvedResponses","leagueGamerTags","gameLogins","filteredGamerTags","concat","gameLoginTypeId","nickName","join","gamerId","catch","error","console","log","Fragment","href","nick","key","Nav","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.37be19a2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction OpGg() {\r\n  const [matchId, setMatchId] = useState(0);\r\n  const [gamerTags, setGamerTags] = useState([]);\r\n  const [nicks, setNicks] = useState([]);\r\n  const [nickHref, setNickHref] = useState('');\r\n  const [gamerTagHref, setGamerTagHref] = useState('');\r\n  const [alertMessage, setAlertMessage] = useState('');\r\n\r\n  const onSubmit = () => {\r\n    if (matchId > 0) {\r\n      const ncOrganisationId = 661;\r\n      const leagueGameLoginType = 2;\r\n      fetch(`https://app.esportligaen.dk/api/match/details/${matchId}`)\r\n        .then(response => {\r\n          if (response.ok) {\r\n            return response.json();\r\n          }\r\n          setAlertMessage(\"Could not resolve a match from the given ID, which resulted in an error.. Try another ID! (Error in console)\");\r\n          throw new Error(`Received a status '${response.status}' and did therefore not continue..`);\r\n        })\r\n        .then(matchData => {\r\n          const opponentTeam = matchData.MatchTeams.filter(matchTeam => matchTeam.Team.Organisation.id !== ncOrganisationId);\r\n\r\n          if (opponentTeam.length === 1) {\r\n            const opponentPlayers = opponentTeam[0].Team.TeamMembers;\r\n\r\n            let promiseArray = [];\r\n            opponentPlayers.forEach(player =>\r\n              promiseArray.push(fetch(`https://app.esportligaen.dk/api/user/${player.id}?includeGameTeamInfo=true`))\r\n            );\r\n            Promise.all(promiseArray)\r\n              .then(responseArray =>\r\n                Promise.all(responseArray.map(response => response.json()))\r\n                  .then(resolvedResponses => {\r\n                    const leagueGamerTags = resolvedResponses\r\n                      .map(response => response.gameLogins);\r\n                    const filteredGamerTags = [].concat(...leagueGamerTags).filter(gameLogins => gameLogins.gameLoginTypeId === leagueGameLoginType);\r\n                    setGamerTags(filteredGamerTags);\r\n                    setNicks(opponentPlayers);\r\n                    setNickHref(`https://euw.op.gg/multi/query=${opponentPlayers.map(player => player.nickName).join()}`);\r\n                    setGamerTagHref(`https://euw.op.gg/multi/query=${filteredGamerTags.map(player => player.gamerId).join()}`);\r\n                    setAlertMessage('');\r\n                  })\r\n              );\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      {alertMessage && alertMessage !== '' &&\r\n        <div class=\"alert alert-primary\">\r\n          {alertMessage}\r\n        </div>\r\n      }\r\n      <h3>NC ColLeagues</h3>\r\n      <div className=\"form-horizontal\">\r\n        <div className=\"form-group\">\r\n          <label>Enter match ID here:</label>\r\n          <input className=\"form-control\" type=\"number\" value={matchId}\r\n            placeholder=\"Type in match ID here...\"\r\n            onChange={event => setMatchId(event.target.value)}></input>\r\n          <small className=\"form-text text-muted\">Example: Enter \"24480\" for https://app.esportligaen.dk/match/24480</small> \r\n        </div>\r\n        <button className=\"btn btn-primary app-btn\" onClick={onSubmit}>Search</button>\r\n      </div>\r\n      \r\n      {nickHref && nicks && alertMessage === '' &&\r\n        <React.Fragment>\r\n          <div className=\"row\">\r\n            <div className=\"col col-lg-6\">\r\n              <a href={nickHref} target=\"_blank\">Nicknames (displayed on match tab):</a>\r\n            </div>\r\n          </div>\r\n          <ul>\r\n            {nicks.map(nick => (\r\n              <li key={nick.id}>{nick.nickName}</li>\r\n            ))}\r\n          </ul>\r\n        </React.Fragment>}\r\n      {gamerTagHref && gamerTags && alertMessage === '' &&\r\n        <React.Fragment>\r\n          <div className=\"row\">\r\n            <div className=\"col col-lg-6\">\r\n              <a href={gamerTagHref} target=\"_blank\">GamerTags (found on player profiles):</a>\r\n            </div>\r\n          </div>\r\n          <ul>\r\n            {gamerTags.map(player => (\r\n              <li key={player.id}>{player.gamerId}</li>\r\n            ))}\r\n          </ul>\r\n        </React.Fragment>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OpGg;","import React from 'react';\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n  return (\r\n    <React.Fragment>\r\n      <nav className=\"navbar app-navbar\">\r\n        <p>NC ColLeagues</p>\r\n      </nav>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport './App.css';\r\nimport OpGg from './components/OpGg';\r\nimport Nav from './components/Nav';\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Nav />\r\n      <div className=\"app\">\r\n        <OpGg />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}