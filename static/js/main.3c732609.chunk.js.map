{"version":3,"sources":["shared/TeamInfo.js","Home/Home.js","Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["TeamInfo","players","hrefText","href","map","player","ign","join","Fragment","className","target","key","id","Home","useState","matchId","setMatchId","gamerTags","setGamerTags","nicks","setNicks","alertMessage","setAlertMessage","onSubmit","a","ncOrganisationId","leagueGameLoginType","fetch","response","ok","json","matchData","opponentTeam","MatchTeams","filter","matchTeam","Team","Organisation","length","opponentPlayers","TeamMembers","promiseArray","then","res","Promise","all","resolvedResponses","filteredGamerTags","flatMap","gameLogins","gameLoginTypeId","gamerId","nickName","type","value","placeholder","onChange","event","onClick","Nav","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3c732609.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction TeamInfo({ players, hrefText }) {\r\n  const href = `https://euw.op.gg/multi/query=${players.map(player => player.ign).join()}`;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"row\">\r\n        <div className=\"col col-lg-6\">\r\n          <a href={href} target=\"_blank\">{hrefText}</a>\r\n        </div>\r\n      </div>\r\n      <ul>\r\n        {players.map(player => (\r\n          <li key={player.id}>{player.ign}</li>\r\n        ))}\r\n      </ul>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default TeamInfo;","import React, { useState } from \"react\";\r\nimport TeamInfo from '../shared/TeamInfo';\r\n\r\nfunction Home() {\r\n  const [matchId, setMatchId] = useState(0);\r\n  const [gamerTags, setGamerTags] = useState([]);\r\n  const [nicks, setNicks] = useState([]);\r\n  const [alertMessage, setAlertMessage] = useState('');\r\n\r\n  const onSubmit = async () => {\r\n    if (matchId > 0) {\r\n      const ncOrganisationId = 661;\r\n      const leagueGameLoginType = 2;\r\n      const response = await fetch(`https://app.esportligaen.dk/api/match/details/${matchId}`)\r\n\r\n      if (!response.ok) {\r\n        setAlertMessage(\"Could not resolve a match from the given ID, which resulted in an error. Try another ID..\");\r\n        return;\r\n      }\r\n\r\n      const matchData = await response.json();\r\n      const opponentTeam = matchData.MatchTeams.filter(matchTeam => matchTeam.Team.Organisation.id !== ncOrganisationId);\r\n\r\n      if (opponentTeam.length === 1) {\r\n        const opponentPlayers = opponentTeam[0].Team.TeamMembers;\r\n        let promiseArray = opponentPlayers.map(player => fetch(`https://app.esportligaen.dk/api/user/${player.id}?includeGameTeamInfo=true`)\r\n          .then(res => res.json()));\r\n\r\n        const resolvedResponses = await Promise.all(promiseArray)\r\n        const filteredGamerTags = resolvedResponses\r\n          .flatMap(response => response.gameLogins)\r\n          .filter(gameLogins => gameLogins.gameLoginTypeId === leagueGameLoginType);\r\n\r\n        setGamerTags(filteredGamerTags.map(player => ({ id: player.id, ign: player.gamerId })));\r\n        setNicks(opponentPlayers.map(player => ({ id: player.id, ign: player.nickName })));\r\n        setAlertMessage('');\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      {alertMessage && alertMessage !== '' &&\r\n        <div className=\"alert alert-primary\">\r\n          {alertMessage}\r\n        </div>\r\n      }\r\n      <h3>NC ColLeagues</h3>\r\n      <div className=\"form-horizontal\">\r\n        <div className=\"form-group\">\r\n          <label>Enter match ID here:</label>\r\n          <input className=\"form-control\" type=\"number\" value={matchId}\r\n            placeholder=\"Type in match ID here...\"\r\n            onChange={event => setMatchId(event.target.value)}></input>\r\n          <small className=\"form-text text-muted\">Example: Enter \"24480\" for https://app.esportligaen.dk/match/24480</small>\r\n        </div>\r\n        <button className=\"btn btn-primary app-btn\" onClick={onSubmit}>Search</button>\r\n      </div>\r\n      {nicks.length > 0 && alertMessage === '' &&\r\n        <TeamInfo players={nicks} hrefText=\"Nicknames:\" />}\r\n      {gamerTags.length > 0 && alertMessage === '' &&\r\n        <TeamInfo players={gamerTags} hrefText=\"GamerTags (from player-profiles):\" />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n  return (\r\n    <React.Fragment>\r\n      <nav className=\"navbar app-navbar\">\r\n        <p>NC ColLeagues</p>\r\n      </nav>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Nav;","import React from 'react';\nimport './App.css';\nimport Home from './Home/Home';\nimport Nav from './Nav/Nav';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Nav />\n      <div className=\"app\">\n        <Home />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}